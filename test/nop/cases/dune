;; This file has been generated by /test/nop/write-dune.sh, do not edit it.

;; ============================ [ Comparisons ] ============================= ;;

(rule
 (alias runtest)
 (action
  (progn   (diff assert_from_scratch.expected assert_monad.expected)
   (diff for_from_scratch.expected for_monad.expected)
   (diff for_nested_from_scratch.expected for_nested_monad.expected)
   (diff if_from_scratch.expected if_monad.expected)
   (diff let_from_scratch.expected let_monad.expected)
   (diff match_exn_caught_2_from_scratch.expected match_exn_caught_2_monad.expected)
   (diff match_exn_caught_by_catchall_from_scratch.expected match_exn_caught_by_catchall_monad.expected)
   (diff match_exn_caught_from_scratch.expected match_exn_caught_monad.expected)
   (diff match_exn_uncaught_from_scratch.expected match_exn_uncaught_monad.expected)
   (diff match_guard_false_from_scratch.expected match_guard_false_monad.expected)
   (diff match_guard_true_from_scratch.expected match_guard_true_monad.expected)
   (diff match_from_scratch.expected match_monad.expected)
   (diff match_nasty_exn_uncaught_2_from_scratch.expected match_nasty_exn_uncaught_2_monad.expected)
   (diff match_nasty_exn_uncaught_from_scratch.expected match_nasty_exn_uncaught_monad.expected)
   (diff match_no_guard_from_scratch.expected match_no_guard_monad.expected)
   (diff match_normal_after_exn_from_scratch.expected match_normal_after_exn_monad.expected)
   (diff match_normal_before_exn_from_scratch.expected match_normal_before_exn_monad.expected)
   (diff seq_from_scratch.expected seq_monad.expected)
   (diff try_from_scratch.expected try_monad.expected)
   (diff while_from_scratch.expected while_monad.expected)
   (diff while_nested_from_scratch.expected while_nested_monad.expected)
)))

;; =========================== [ ppx_nop_from_scratch ] =========================== ;;

(rule (action (copy assert.ml assert_from_scratch.ml)))
(executable (name assert_from_scratch) (modules assert_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to assert_from_scratch.expected (run ./assert_from_scratch.exe)))

(rule (action (copy for.ml for_from_scratch.ml)))
(executable (name for_from_scratch) (modules for_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to for_from_scratch.expected (run ./for_from_scratch.exe)))

(rule (action (copy for_nested.ml for_nested_from_scratch.ml)))
(executable (name for_nested_from_scratch) (modules for_nested_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to for_nested_from_scratch.expected (run ./for_nested_from_scratch.exe)))

(rule (action (copy if.ml if_from_scratch.ml)))
(executable (name if_from_scratch) (modules if_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to if_from_scratch.expected (run ./if_from_scratch.exe)))

(rule (action (copy let.ml let_from_scratch.ml)))
(executable (name let_from_scratch) (modules let_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to let_from_scratch.expected (run ./let_from_scratch.exe)))

(rule (action (copy match_exn_caught_2.ml match_exn_caught_2_from_scratch.ml)))
(executable (name match_exn_caught_2_from_scratch) (modules match_exn_caught_2_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_exn_caught_2_from_scratch.expected (run ./match_exn_caught_2_from_scratch.exe)))

(rule (action (copy match_exn_caught_by_catchall.ml match_exn_caught_by_catchall_from_scratch.ml)))
(executable (name match_exn_caught_by_catchall_from_scratch) (modules match_exn_caught_by_catchall_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_exn_caught_by_catchall_from_scratch.expected (run ./match_exn_caught_by_catchall_from_scratch.exe)))

(rule (action (copy match_exn_caught.ml match_exn_caught_from_scratch.ml)))
(executable (name match_exn_caught_from_scratch) (modules match_exn_caught_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_exn_caught_from_scratch.expected (run ./match_exn_caught_from_scratch.exe)))

(rule (action (copy match_exn_uncaught.ml match_exn_uncaught_from_scratch.ml)))
(executable (name match_exn_uncaught_from_scratch) (modules match_exn_uncaught_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_exn_uncaught_from_scratch.expected (run ./match_exn_uncaught_from_scratch.exe)))

(rule (action (copy match_guard_false.ml match_guard_false_from_scratch.ml)))
(executable (name match_guard_false_from_scratch) (modules match_guard_false_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_guard_false_from_scratch.expected (run ./match_guard_false_from_scratch.exe)))

(rule (action (copy match_guard_true.ml match_guard_true_from_scratch.ml)))
(executable (name match_guard_true_from_scratch) (modules match_guard_true_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_guard_true_from_scratch.expected (run ./match_guard_true_from_scratch.exe)))

(rule (action (copy match.ml match_from_scratch.ml)))
(executable (name match_from_scratch) (modules match_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_from_scratch.expected (run ./match_from_scratch.exe)))

(rule (action (copy match_nasty_exn_uncaught_2.ml match_nasty_exn_uncaught_2_from_scratch.ml)))
(executable (name match_nasty_exn_uncaught_2_from_scratch) (modules match_nasty_exn_uncaught_2_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_nasty_exn_uncaught_2_from_scratch.expected (run ./match_nasty_exn_uncaught_2_from_scratch.exe)))

(rule (action (copy match_nasty_exn_uncaught.ml match_nasty_exn_uncaught_from_scratch.ml)))
(executable (name match_nasty_exn_uncaught_from_scratch) (modules match_nasty_exn_uncaught_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_nasty_exn_uncaught_from_scratch.expected (run ./match_nasty_exn_uncaught_from_scratch.exe)))

(rule (action (copy match_no_guard.ml match_no_guard_from_scratch.ml)))
(executable (name match_no_guard_from_scratch) (modules match_no_guard_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_no_guard_from_scratch.expected (run ./match_no_guard_from_scratch.exe)))

(rule (action (copy match_normal_after_exn.ml match_normal_after_exn_from_scratch.ml)))
(executable (name match_normal_after_exn_from_scratch) (modules match_normal_after_exn_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_normal_after_exn_from_scratch.expected (run ./match_normal_after_exn_from_scratch.exe)))

(rule (action (copy match_normal_before_exn.ml match_normal_before_exn_from_scratch.ml)))
(executable (name match_normal_before_exn_from_scratch) (modules match_normal_before_exn_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to match_normal_before_exn_from_scratch.expected (run ./match_normal_before_exn_from_scratch.exe)))

(rule (action (copy seq.ml seq_from_scratch.ml)))
(executable (name seq_from_scratch) (modules seq_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to seq_from_scratch.expected (run ./seq_from_scratch.exe)))

(rule (action (copy try.ml try_from_scratch.ml)))
(executable (name try_from_scratch) (modules try_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to try_from_scratch.expected (run ./try_from_scratch.exe)))

(rule (action (copy while.ml while_from_scratch.ml)))
(executable (name while_from_scratch) (modules while_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to while_from_scratch.expected (run ./while_from_scratch.exe)))

(rule (action (copy while_nested.ml while_nested_from_scratch.ml)))
(executable (name while_nested_from_scratch) (modules while_nested_from_scratch) (libraries ppx_monad) (preprocess (pps ppx_nop_from_scratch)))
(rule (with-stdout-to while_nested_from_scratch.expected (run ./while_nested_from_scratch.exe)))

;; =========================== [ ppx_nop_monad ] =========================== ;;

(rule (action (copy assert.ml assert_monad.ml)))
(executable (name assert_monad) (modules assert_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to assert_monad.expected (run ./assert_monad.exe)))

(rule (action (copy for.ml for_monad.ml)))
(executable (name for_monad) (modules for_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to for_monad.expected (run ./for_monad.exe)))

(rule (action (copy for_nested.ml for_nested_monad.ml)))
(executable (name for_nested_monad) (modules for_nested_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to for_nested_monad.expected (run ./for_nested_monad.exe)))

(rule (action (copy if.ml if_monad.ml)))
(executable (name if_monad) (modules if_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to if_monad.expected (run ./if_monad.exe)))

(rule (action (copy let.ml let_monad.ml)))
(executable (name let_monad) (modules let_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to let_monad.expected (run ./let_monad.exe)))

(rule (action (copy match_exn_caught_2.ml match_exn_caught_2_monad.ml)))
(executable (name match_exn_caught_2_monad) (modules match_exn_caught_2_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_exn_caught_2_monad.expected (run ./match_exn_caught_2_monad.exe)))

(rule (action (copy match_exn_caught_by_catchall.ml match_exn_caught_by_catchall_monad.ml)))
(executable (name match_exn_caught_by_catchall_monad) (modules match_exn_caught_by_catchall_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_exn_caught_by_catchall_monad.expected (run ./match_exn_caught_by_catchall_monad.exe)))

(rule (action (copy match_exn_caught.ml match_exn_caught_monad.ml)))
(executable (name match_exn_caught_monad) (modules match_exn_caught_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_exn_caught_monad.expected (run ./match_exn_caught_monad.exe)))

(rule (action (copy match_exn_uncaught.ml match_exn_uncaught_monad.ml)))
(executable (name match_exn_uncaught_monad) (modules match_exn_uncaught_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_exn_uncaught_monad.expected (run ./match_exn_uncaught_monad.exe)))

(rule (action (copy match_guard_false.ml match_guard_false_monad.ml)))
(executable (name match_guard_false_monad) (modules match_guard_false_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_guard_false_monad.expected (run ./match_guard_false_monad.exe)))

(rule (action (copy match_guard_true.ml match_guard_true_monad.ml)))
(executable (name match_guard_true_monad) (modules match_guard_true_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_guard_true_monad.expected (run ./match_guard_true_monad.exe)))

(rule (action (copy match.ml match_monad.ml)))
(executable (name match_monad) (modules match_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_monad.expected (run ./match_monad.exe)))

(rule (action (copy match_nasty_exn_uncaught_2.ml match_nasty_exn_uncaught_2_monad.ml)))
(executable (name match_nasty_exn_uncaught_2_monad) (modules match_nasty_exn_uncaught_2_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_nasty_exn_uncaught_2_monad.expected (run ./match_nasty_exn_uncaught_2_monad.exe)))

(rule (action (copy match_nasty_exn_uncaught.ml match_nasty_exn_uncaught_monad.ml)))
(executable (name match_nasty_exn_uncaught_monad) (modules match_nasty_exn_uncaught_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_nasty_exn_uncaught_monad.expected (run ./match_nasty_exn_uncaught_monad.exe)))

(rule (action (copy match_no_guard.ml match_no_guard_monad.ml)))
(executable (name match_no_guard_monad) (modules match_no_guard_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_no_guard_monad.expected (run ./match_no_guard_monad.exe)))

(rule (action (copy match_normal_after_exn.ml match_normal_after_exn_monad.ml)))
(executable (name match_normal_after_exn_monad) (modules match_normal_after_exn_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_normal_after_exn_monad.expected (run ./match_normal_after_exn_monad.exe)))

(rule (action (copy match_normal_before_exn.ml match_normal_before_exn_monad.ml)))
(executable (name match_normal_before_exn_monad) (modules match_normal_before_exn_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to match_normal_before_exn_monad.expected (run ./match_normal_before_exn_monad.exe)))

(rule (action (copy seq.ml seq_monad.ml)))
(executable (name seq_monad) (modules seq_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to seq_monad.expected (run ./seq_monad.exe)))

(rule (action (copy try.ml try_monad.ml)))
(executable (name try_monad) (modules try_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to try_monad.expected (run ./try_monad.exe)))

(rule (action (copy while.ml while_monad.ml)))
(executable (name while_monad) (modules while_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to while_monad.expected (run ./while_monad.exe)))

(rule (action (copy while_nested.ml while_nested_monad.ml)))
(executable (name while_nested_monad) (modules while_nested_monad) (libraries ppx_monad) (preprocess (pps ppx_nop_monad)))
(rule (with-stdout-to while_nested_monad.expected (run ./while_nested_monad.exe)))
